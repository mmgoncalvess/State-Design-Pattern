State Design Pattern
====================

Allows an object called Context to alter its behavior when its internal state changes. The key idea in this pattern
is to introduce an abstract class called State to represent the state of Context. The State class declares an
interface common to all classes that represent different operational states. Subclasses of State implement state
specific behavior.

Participants
============

*** Context
Defines the interface of interest to clients.
Maintains an instance of a ConcreteState subclass that defines

*** State
Defines an interface for encapsulating the behavior associated with a particular state of the Context.
ConcreteState subclasses implements a behavior associated with a state of the Context.


Collaborations
==============
-- Context delegates state-specific requests to the current State object.
-- A context may pass itself as an argument to the State object handling the request. This lets the State
object access the context if necessary.
-- Context is the primary interface for clients. Clients can configure a context with State objects. Once
a context is configured, its clients don't have to deal with the State objects directly.
-- Either Context or the ConcreteState subclasses can decide which state succeeds another and under what circumstances.

